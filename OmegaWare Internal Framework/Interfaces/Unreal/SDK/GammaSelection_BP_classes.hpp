#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GammaSelection_BP

#include "Basic.hpp"

#include "Indiana_classes.hpp"


namespace CG
{

// WidgetBlueprintGeneratedClass GammaSelection_BP.GammaSelection_BP_C
// 0x0028 (0x0398 - 0x0370)
class UGammaSelection_BP_C final : public UGammaSelectionWidget
{
public:
	class UWidgetAnimation*                       Outro;                                             // 0x0370(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Intro;                                             // 0x0378(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBackgroundPanelWidget_C*               BackgroundPanelWidget;                             // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 GammaImage;                                        // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           RootCanvas;                                        // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GammaSelection_BP_C">();
	}
	static class UGammaSelection_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGammaSelection_BP_C>();
	}
};
static_assert(alignof(UGammaSelection_BP_C) == 0x000008, "Wrong alignment on UGammaSelection_BP_C");
static_assert(sizeof(UGammaSelection_BP_C) == 0x000398, "Wrong size on UGammaSelection_BP_C");
static_assert(offsetof(UGammaSelection_BP_C, Outro) == 0x000370, "Member 'UGammaSelection_BP_C::Outro' has a wrong offset!");
static_assert(offsetof(UGammaSelection_BP_C, Intro) == 0x000378, "Member 'UGammaSelection_BP_C::Intro' has a wrong offset!");
static_assert(offsetof(UGammaSelection_BP_C, BackgroundPanelWidget) == 0x000380, "Member 'UGammaSelection_BP_C::BackgroundPanelWidget' has a wrong offset!");
static_assert(offsetof(UGammaSelection_BP_C, GammaImage) == 0x000388, "Member 'UGammaSelection_BP_C::GammaImage' has a wrong offset!");
static_assert(offsetof(UGammaSelection_BP_C, RootCanvas) == 0x000390, "Member 'UGammaSelection_BP_C::RootCanvas' has a wrong offset!");

}

